---
# tasks file for ppl-mysql-cluster
- name: Create config and logs difrectories for master server
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
  - "{{ dir_base_master }}/logs"
  - "{{ dir_base_master }}/config"
  - "{{ dir_base_master }}/tmp"
  - "{{ dir_base_slave }}/logs"
  - "{{ dir_base_slave }}/config"

- name: Create a MySql network.
  docker_network:
    name: my_net

- name: Start mysql master container.
  docker_container:
    name: "{{ name_master }}"
    image: "{{ image }}"
    state: started
    #log_driver: syslog
    networks:
    - name: my_net
    published_ports:
    - "{{ src_port_master }}:{{ dest_port}}"
    env:
      MYSQL_ROOT_PASSWORD: "{{ root_password }}"
      MYSQL_REPLICATION_MODE: master
      MYSQL_REPLICATION_USER: "{{ my_repl_user }}"
      MYSQL_REPLICATION_PASSWORD: "{{ my_repl_password }}"
      MYSQL_DATABASE: "{{ db_name }}"
      MYSQL_USER: "{{ my_user }}"
      MYSQL_PASSWORD: "{{ my_pass }}"


- name: Start mysql slave container.
  docker_container:
    name: "{{ name_slave }}"
    image: "{{ image }}"
    state: started
    #log_driver: syslog
    networks:
    - name: my_net
    published_ports:
    - "{{ src_port_slave }}:{{ dest_port}}"
    env:
      MYSQL_REPLICATION_MODE: slave
      MYSQL_REPLICATION_USER: "{{ my_repl_user }}"
      MYSQL_REPLICATION_PASSWORD: "{{ my_repl_password }}"
      MYSQL_MASTER_HOST: "{{ name_master }}"
      MYSQL_MASTER_ROOT_PASSWORD: "{{ root_password }}"

- name: Clone db dump from GH
  run_once: true
  git:
    repo: 'https://github.com/datacharmer/test_db'
    dest: "{{ dir_base_master }}/tmp"
    clone: yes

- name: Install required pkgs on main host
  action: apt pkg={{item}} state=installed
  run_once: true
  with_items:
    - mysql-client
    - python-mysqldb
  

- name: Collect mysql master dontainer IP address
  run_once: true
  command:  "docker inspect --format {% raw %}'{{ .NetworkSettings.IPAddress }}'{% endraw %} {{ name_master }}"
  register: container_ip


- name : Restore dump to test_db
  run_once: true
  shell: mysql -h "{{ container_ip.stdout }}" -u"{{ my_user }}" -p"{{ my_pass }}" "{{ db_name }}" < employees.sql
  args:
    chdir: "{{ dir_base_master }}/tmp"
  # Using command: instead of mysql_db module, becase needed change directory of execution for loading all dumps

  #command:  "docker inspect --format {% raw %}'{{ .NetworkSettings.IPAddress }}'{% endraw %} {{ name_master }}"
  #register: container_ip  
  #  mysql_db:
  #  login_host: "{{ container_ip.stdout }}"
  #  name: "{{ db_name }}"
  #  login_user: "{{ my_user }}" 
  #  login_password: "{{ my_pass }}"
  #  state: import
  #  target: "{{ dir_base_master }}/tmp/employees.sql"

